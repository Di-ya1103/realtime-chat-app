{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diya\\\\Documents\\\\realtime-chat-app\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport Login from './components/Login';\nimport ChatList from './components/ChatList';\nimport ChatWindow from './components/ChatWindow';\nimport { getUsers } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nexport default function App() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState(new Set());\n  const [activeChat, setActiveChat] = useState(null);\n  const socketRef = useRef(null);\n\n  // Setup socket when user logs in\n  useEffect(() => {\n    if (!user) return;\n    const socket = io(SOCKET_URL);\n    socketRef.current = socket;\n    socket.on('connect', () => {\n      socket.emit('user:connect', user);\n    });\n    socket.on('online:users', list => {\n      setOnlineUsers(new Set(list));\n    });\n    socket.on('receive:message', msg => {\n      window.dispatchEvent(new CustomEvent('socket:message', {\n        detail: msg\n      }));\n    });\n    return () => {\n      socket.disconnect();\n      socketRef.current = null;\n    };\n  }, [user]);\n\n  // Load users after login\n  useEffect(() => {\n    if (user) fetchUsers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n  const fetchUsers = async () => {\n    try {\n      const us = await getUsers();\n      setUsers(us.filter(u => u._id !== user.id));\n    } catch (err) {\n      console.error('fetchUsers error', err);\n    }\n  };\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: u => setUser(u)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile\",\n        children: [\"Logged in as \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: user.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatList, {\n        users: users,\n        onlineUsers: onlineUsers,\n        onOpen: u => setActiveChat(u),\n        refreshUsers: fetchUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: activeChat ? /*#__PURE__*/_jsxDEV(ChatWindow, {\n        user: user,\n        other: activeChat,\n        socket: socketRef.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty\",\n        children: \"Open a chat to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RrKjHWEO9XWQi93sx6UJA82Tx4U=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","io","Login","ChatList","ChatWindow","getUsers","jsxDEV","_jsxDEV","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","App","_s","user","setUser","users","setUsers","onlineUsers","setOnlineUsers","Set","activeChat","setActiveChat","socketRef","socket","current","on","emit","list","msg","window","dispatchEvent","CustomEvent","detail","disconnect","fetchUsers","us","filter","u","_id","id","err","console","error","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","className","children","username","onOpen","refreshUsers","other","_c","$RefreshReg$"],"sources":["C:/Users/Diya/Documents/realtime-chat-app/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\nimport Login from './components/Login';\r\nimport ChatList from './components/ChatList';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport { getUsers } from './services/api';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\nexport default function App() {\r\n  const [user, setUser] = useState(null);\r\n  const [users, setUsers] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState(new Set());\r\n  const [activeChat, setActiveChat] = useState(null);\r\n  const socketRef = useRef(null);\r\n\r\n  // Setup socket when user logs in\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const socket = io(SOCKET_URL);\r\n    socketRef.current = socket;\r\n\r\n    socket.on('connect', () => {\r\n      socket.emit('user:connect', user);\r\n    });\r\n\r\n    socket.on('online:users', (list) => {\r\n      setOnlineUsers(new Set(list));\r\n    });\r\n\r\n    socket.on('receive:message', (msg) => {\r\n      window.dispatchEvent(new CustomEvent('socket:message', { detail: msg }));\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      socketRef.current = null;\r\n    };\r\n  }, [user]);\r\n\r\n  // Load users after login\r\n  useEffect(() => {\r\n    if (user) fetchUsers();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [user]);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const us = await getUsers();\r\n      setUsers(us.filter(u => u._id !== user.id));\r\n    } catch (err) {\r\n      console.error('fetchUsers error', err);\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return <Login onLogin={(u) => setUser(u)} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"profile\">Logged in as <strong>{user.username}</strong></div>\r\n\r\n        <ChatList\r\n          users={users}\r\n          onlineUsers={onlineUsers}\r\n          onOpen={(u) => setActiveChat(u)}\r\n          refreshUsers={fetchUsers}\r\n        />\r\n      </aside>\r\n\r\n      <main className=\"main\">\r\n        {activeChat ? (\r\n          <ChatWindow user={user} other={activeChat} socket={socketRef.current} />\r\n        ) : (\r\n          <div className=\"empty\">Open a chat to start messaging</div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}