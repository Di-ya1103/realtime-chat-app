{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diya\\\\Documents\\\\realtime-chat-app\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport ChatList from './components/ChatList';\nimport ChatWindow from './components/ChatWindow';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [onlineUsers, setOnlineUsers] = useState([]); // Store user objects, not just IDs\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Connected to server:', socket.id);\n    });\n    socket.on('update:users', userIds => {\n      // Fetch user details for each ID (simplified; adjust based on your auth setup)\n      const fetchUsers = async () => {\n        const users = await Promise.all(userIds.map(async id => {\n          const response = await fetch(`http://localhost:5000/api/auth/user/${id}`);\n          const data = await response.json();\n          return data.user || {\n            _id: id,\n            username: id\n          }; // Fallback to ID if username not available\n        }));\n        setOnlineUsers(users);\n      };\n      fetchUsers();\n    });\n    socket.on('receive:message', msg => {\n      setMessages(prev => [...prev, msg]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const handleLogin = async () => {\n    if (username.trim()) {\n      const response = await fetch('http://localhost:5000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username\n        })\n      });\n      const data = await response.json();\n      if (data.user) {\n        localStorage.setItem('userId', data.user._id); // Store user ID\n        socket.emit('user:connect', data.user);\n        setIsLoggedIn(true);\n      }\n    }\n  };\n  const sendMessage = text => {\n    if (text.trim() && currentChat) {\n      const msg = {\n        sender: localStorage.getItem('userId'),\n        receiver: currentChat._id,\n        text,\n        timestamp: new Date()\n      };\n      socket.emit('send:message', msg);\n      setMessages(prev => [...prev, {\n        ...msg,\n        sender: {\n          username\n        },\n        receiver: currentChat\n      }]);\n    }\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          placeholder: \"Enter username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLogin,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(ChatList, {\n      onlineUsers: onlineUsers,\n      currentChat: currentChat,\n      setCurrentChat: setCurrentChat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      currentChat: currentChat,\n      messages: messages,\n      sendMessage: sendMessage,\n      username: username // Pass username to ChatWindow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1+efmjN+ZGjkwsPr6Toew5qVqeI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","ChatList","ChatWindow","jsxDEV","_jsxDEV","socket","App","_s","username","setUsername","isLoggedIn","setIsLoggedIn","onlineUsers","setOnlineUsers","currentChat","setCurrentChat","messages","setMessages","on","console","log","id","userIds","fetchUsers","users","Promise","all","map","response","fetch","data","json","user","_id","msg","prev","disconnect","handleLogin","trim","method","headers","body","JSON","stringify","localStorage","setItem","emit","sendMessage","text","sender","getItem","receiver","timestamp","Date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Diya/Documents/realtime-chat-app/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport ChatList from './components/ChatList';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport './styles.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [onlineUsers, setOnlineUsers] = useState([]); // Store user objects, not just IDs\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    socket.on('connect', () => {\r\n      console.log('Connected to server:', socket.id);\r\n    });\r\n\r\n    socket.on('update:users', (userIds) => {\r\n      // Fetch user details for each ID (simplified; adjust based on your auth setup)\r\n      const fetchUsers = async () => {\r\n        const users = await Promise.all(\r\n          userIds.map(async (id) => {\r\n            const response = await fetch(`http://localhost:5000/api/auth/user/${id}`);\r\n            const data = await response.json();\r\n            return data.user || { _id: id, username: id }; // Fallback to ID if username not available\r\n          })\r\n        );\r\n        setOnlineUsers(users);\r\n      };\r\n      fetchUsers();\r\n    });\r\n\r\n    socket.on('receive:message', (msg) => {\r\n      setMessages((prev) => [...prev, msg]);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const handleLogin = async () => {\r\n    if (username.trim()) {\r\n      const response = await fetch('http://localhost:5000/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username }),\r\n      });\r\n      const data = await response.json();\r\n      if (data.user) {\r\n        localStorage.setItem('userId', data.user._id); // Store user ID\r\n        socket.emit('user:connect', data.user);\r\n        setIsLoggedIn(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const sendMessage = (text) => {\r\n    if (text.trim() && currentChat) {\r\n      const msg = {\r\n        sender: localStorage.getItem('userId'),\r\n        receiver: currentChat._id,\r\n        text,\r\n        timestamp: new Date(),\r\n      };\r\n      socket.emit('send:message', msg);\r\n      setMessages((prev) => [...prev, { ...msg, sender: { username }, receiver: currentChat }]);\r\n    }\r\n  };\r\n\r\n  if (!isLoggedIn) {\r\n    return (\r\n      <div className=\"login-container\">\r\n        <div className=\"login-box\">\r\n          <h1>Login</h1>\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            placeholder=\"Enter username\"\r\n          />\r\n          <button onClick={handleLogin}>Login</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <ChatList\r\n        onlineUsers={onlineUsers}\r\n        currentChat={currentChat}\r\n        setCurrentChat={setCurrentChat}\r\n      />\r\n      <ChatWindow\r\n        currentChat={currentChat}\r\n        messages={messages}\r\n        sendMessage={sendMessage}\r\n        username={username} // Pass username to ChatWindow\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}