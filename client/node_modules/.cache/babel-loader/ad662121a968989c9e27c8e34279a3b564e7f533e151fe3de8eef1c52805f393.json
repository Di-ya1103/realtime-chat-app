{"ast":null,"code":"import express from 'express';\nimport http from 'http';\nimport mongoose from 'mongoose';\nimport { Server } from 'socket.io';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport authRoutes from './routes/auth.js';\nimport messageRoutes from './routes/messages.js';\nimport User from './models/User.js';\nimport Message from './models/Message.js';\ndotenv.config();\nconsole.log('Loaded environment variables:', process.env);\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: 'http://localhost:3000'\n  }\n});\napp.use(cors({\n  origin: 'http://localhost:3000'\n}));\napp.use(express.json());\n\n// Optional root route for testing\napp.get('/', (req, res) => res.send('Server is running!'));\napp.get('/favicon.ico', (req, res) => res.status(204).end());\napp.use('/api/auth', authRoutes);\napp.use('/api/messages', messageRoutes);\nif (!process.env.MONGO_URI) {\n  console.error('Error: MONGO_URI is not defined in .env file');\n  process.exit(1);\n}\nmongoose.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  serverSelectionTimeoutMS: 30000,\n  socketTimeoutMS: 45000\n}).then(() => console.log('MongoDB connected successfully')).catch(err => {\n  console.error('MongoDB connection error:', err.message || err);\n  process.exit(1);\n});\nconst onlineUsers = new Map();\nio.on('connection', socket => {\n  console.log('New socket connection:', socket.id);\n  socket.on('user:connect', async user => {\n    if (!(user !== null && user !== void 0 && user._id)) {\n      console.log('Invalid user ID in user:connect:', user);\n      return;\n    }\n    try {\n      onlineUsers.set(user._id, socket.id);\n      await User.findByIdAndUpdate(user._id, {\n        online: true\n      });\n      io.emit('update:users', Array.from(onlineUsers.keys()));\n      console.log('User connected:', user._id, 'Online users:', Array.from(onlineUsers.entries()));\n    } catch (err) {\n      console.error('Error updating user online status:', err.message || err);\n    }\n  });\n  socket.on('send:message', async msg => {\n    console.log('Received message:', msg);\n    try {\n      if (!msg.sender || !msg.receiver || !msg.text) {\n        console.log('Invalid message data:', msg);\n        return;\n      }\n      console.log('Creating message with:', {\n        sender: msg.sender,\n        receiver: msg.receiver,\n        text: msg.text\n      });\n      const newMessage = await Message.create({\n        sender: mongoose.Types.ObjectId.createFromHexString(msg.sender),\n        receiver: mongoose.Types.ObjectId.createFromHexString(msg.receiver),\n        text: msg.text,\n        timestamp: msg.timestamp || new Date()\n      });\n      const populatedMessage = await Message.findById(newMessage._id).populate('sender', 'username').populate('receiver', 'username');\n      const receiverSocket = onlineUsers.get(msg.receiver);\n      if (receiverSocket) io.to(receiverSocket).emit('receive:message', populatedMessage);\n      io.to(socket.id).emit('receive:message', populatedMessage);\n      console.log('Message sent:', populatedMessage);\n    } catch (err) {\n      console.error('Error sending message:', err.message || err);\n    }\n  });\n  socket.on('disconnect', async () => {\n    console.log('Socket disconnecting:', socket.id);\n    for (const [userId, sId] of onlineUsers.entries()) {\n      if (sId === socket.id) {\n        onlineUsers.delete(userId);\n        try {\n          await User.findByIdAndUpdate(userId, {\n            online: false\n          });\n          io.emit('update:users', Array.from(onlineUsers.keys()));\n          console.log('User disconnected:', userId, 'Online users:', Array.from(onlineUsers.entries()));\n        } catch (err) {\n          console.error('Error updating user offline status:', err.message || err);\n        }\n        break;\n      }\n    }\n  });\n});\nconst PORT = process.env.PORT || 5000;\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","http","mongoose","Server","cors","dotenv","authRoutes","messageRoutes","User","Message","config","console","log","process","env","app","server","createServer","io","origin","use","json","get","req","res","send","status","end","MONGO_URI","error","exit","connect","useNewUrlParser","useUnifiedTopology","serverSelectionTimeoutMS","socketTimeoutMS","then","catch","err","message","onlineUsers","Map","on","socket","id","user","_id","set","findByIdAndUpdate","online","emit","Array","from","keys","entries","msg","sender","receiver","text","newMessage","create","Types","ObjectId","createFromHexString","timestamp","Date","populatedMessage","findById","populate","receiverSocket","to","userId","sId","delete","PORT","listen"],"sources":["C:/Users/Diya/Documents/realtime-chat-app/client/src/index.js"],"sourcesContent":["import express from 'express';\r\nimport http from 'http';\r\nimport mongoose from 'mongoose';\r\nimport { Server } from 'socket.io';\r\nimport cors from 'cors';\r\nimport dotenv from 'dotenv';\r\nimport authRoutes from './routes/auth.js';\r\nimport messageRoutes from './routes/messages.js';\r\nimport User from './models/User.js';\r\nimport Message from './models/Message.js';\r\n\r\ndotenv.config();\r\n\r\nconsole.log('Loaded environment variables:', process.env);\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = new Server(server, {\r\n  cors: { origin: 'http://localhost:3000' },\r\n});\r\n\r\napp.use(cors({ origin: 'http://localhost:3000' }));\r\napp.use(express.json());\r\n\r\n// Optional root route for testing\r\napp.get('/', (req, res) => res.send('Server is running!'));\r\n\r\napp.get('/favicon.ico', (req, res) => res.status(204).end());\r\n\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/messages', messageRoutes);\r\n\r\nif (!process.env.MONGO_URI) {\r\n  console.error('Error: MONGO_URI is not defined in .env file');\r\n  process.exit(1);\r\n}\r\n\r\nmongoose.connect(process.env.MONGO_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n  serverSelectionTimeoutMS: 30000,\r\n  socketTimeoutMS: 45000,\r\n})\r\n  .then(() => console.log('MongoDB connected successfully'))\r\n  .catch((err) => {\r\n    console.error('MongoDB connection error:', err.message || err);\r\n    process.exit(1);\r\n  });\r\n\r\nconst onlineUsers = new Map();\r\n\r\nio.on('connection', (socket) => {\r\n  console.log('New socket connection:', socket.id);\r\n\r\n  socket.on('user:connect', async (user) => {\r\n    if (!user?._id) {\r\n      console.log('Invalid user ID in user:connect:', user);\r\n      return;\r\n    }\r\n    try {\r\n      onlineUsers.set(user._id, socket.id);\r\n      await User.findByIdAndUpdate(user._id, { online: true });\r\n      io.emit('update:users', Array.from(onlineUsers.keys()));\r\n      console.log('User connected:', user._id, 'Online users:', Array.from(onlineUsers.entries()));\r\n    } catch (err) {\r\n      console.error('Error updating user online status:', err.message || err);\r\n    }\r\n  });\r\n\r\n  socket.on('send:message', async (msg) => {\r\n    console.log('Received message:', msg);\r\n    try {\r\n      if (!msg.sender || !msg.receiver || !msg.text) {\r\n        console.log('Invalid message data:', msg);\r\n        return;\r\n      }\r\n      console.log('Creating message with:', { sender: msg.sender, receiver: msg.receiver, text: msg.text });\r\n      const newMessage = await Message.create({\r\n        sender: mongoose.Types.ObjectId.createFromHexString(msg.sender),\r\n        receiver: mongoose.Types.ObjectId.createFromHexString(msg.receiver),\r\n        text: msg.text,\r\n        timestamp: msg.timestamp || new Date(),\r\n      });\r\n\r\n      const populatedMessage = await Message.findById(newMessage._id)\r\n        .populate('sender', 'username')\r\n        .populate('receiver', 'username');\r\n\r\n      const receiverSocket = onlineUsers.get(msg.receiver);\r\n      if (receiverSocket) io.to(receiverSocket).emit('receive:message', populatedMessage);\r\n      io.to(socket.id).emit('receive:message', populatedMessage);\r\n      console.log('Message sent:', populatedMessage);\r\n    } catch (err) {\r\n      console.error('Error sending message:', err.message || err);\r\n    }\r\n  });\r\n\r\n  socket.on('disconnect', async () => {\r\n    console.log('Socket disconnecting:', socket.id);\r\n    for (const [userId, sId] of onlineUsers.entries()) {\r\n      if (sId === socket.id) {\r\n        onlineUsers.delete(userId);\r\n        try {\r\n          await User.findByIdAndUpdate(userId, { online: false });\r\n          io.emit('update:users', Array.from(onlineUsers.keys()));\r\n          console.log('User disconnected:', userId, 'Online users:', Array.from(onlineUsers.entries()));\r\n        } catch (err) {\r\n          console.error('Error updating user offline status:', err.message || err);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}